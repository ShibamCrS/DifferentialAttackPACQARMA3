\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{qarma}[2022/11/29 Utils for illustrating the QARMA cipher]

%%% PREREQUISITES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RequirePackage{amsmath,amssymb}
\RequirePackage{fontawesome5}
\RequirePackage{ifthen}
\RequirePackage{tikz}
\RequirePackage{xspace}
\RequirePackage{tugcolors}
\usetikzlibrary{calc,cipher}

%%% GENERAL CRYPTO UTILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\providecommand{\cipher}[1]{\textsf{#1}}

\providecommand{\SB}{\ensuremath{S}}
\providecommand{\SR}{\ensuremath{\tau}}
\providecommand{\MC}{\ensuremath{M}}
\providecommand{\BS}{\ensuremath{\bar S}}
\providecommand{\RS}{\ensuremath{\bar \tau}}
\providecommand{\CM}{\ensuremath{\bar M}}

%%% COLORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\colorlet{diff}{tugblue}
\colorlet{marc}{tugyellow}
\colorlet{cost}{tugred}

\colorlet{lower_diff}{tugblue}
% \colorlet{lower_diff_cost}{tugblue}

\colorlet{upper_diff}{tuggreen}
% \colorlet{upper_diff_cost}{math}

\tikzset{raster/.style={lightgray}}

%%% UTILS & OPTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\makeatletter
\pgfkeys{%
  /tikz/on layer/.code={
    \pgfonlayer{#1}\begingroup
    \aftergroup\endpgfonlayer
    \aftergroup\endgroup
  },
  /tikz/node on layer/.code={
    \pgfonlayer{#1}\begingroup
    \expandafter\def\expandafter\tikz@node@finish\expandafter{\expandafter\endgroup\expandafter\endpgfonlayer\tikz@node@finish}%
  },
}
\makeatother

\pgfdeclarelayer{bg}
\pgfdeclarelayer{fg}
\pgfdeclarelayer{crosslines_white}
\pgfdeclarelayer{crosslines_black}
\pgfsetlayers{bg,main,crosslines_white,crosslines_black,fg}

\tikzset{
  fillopts/.style={diff},
  markopts/.style={marc,very thick},
  cellopts/.style={font=\scriptsize},
  cross line/.style={preaction={on layer=crosslines_white, draw=white, -, shorten >=1pt, shorten <=1pt, line width=2pt}, on layer=crosslines_black},
  >=latex
}
% \tikzset{teebg/.style={node on layer=fg, shape=circle, fill=red, draw=red, inner sep=0pt, minimum size=5pt}}
\tikzset{teebg/.style={on layer=fg, shape=rectangle, fill=white, draw=white, inner sep=0pt, minimum size=2.5pt}}

\newif\ifcentralaccidentaladd\centralaccidentaladdfalse

%%% STATE MARKING HELPER FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\QarmaLegend}[1]{ \draw (startT0) +(-.72,-2.0) node[above right] {#1}; }
\newcommand{\QL}[2]{ \tikz[stateopts,baseline=(bot)]{#1 \draw (-.5,-.5) coordinate (bot) rectangle (.5,.5);} #2\quad }
\newcommand{\QLfill}[2]{ \QL{\FillCell[#1]{0,0}}{#2} }

\newcommand{\StateLabel}[1]{\draw[gray] (2,0) node[above, overlay, inner sep=1pt, font=\footnotesize] {#1};}
\newcommand{\X}[2]{\ensuremath{SC_{#2}}}
\newcommand{\Y}[2]{\ensuremath{AT_{#2}}}
\newcommand{\Z}[2]{\ensuremath{MC_{#2}}}
\newcommand{\TK}[2]{\ensuremath{TK_{#2}^{#1}}}

\newcommand{\MarkCell}[2][markopts]{\draw[#1] (#2) ++(-.5,.5) rectangle +(1,-1);}

\newcommand{\IndexState}{%
  \foreach \s in {0,...,15} {\Cell{s\s}{\s}}
}

\newcommand{\IndexStateTau}{%
  \foreach \s/\t in {0/0,1/11,2/6,3/13,
                     4/10,5/1,6/12,7/7,
                     8/5,9/14,10/3,11/8,
                     12/15,13/4,14/9,15/2}
    {\Cell{s\s}{\t}}
}

%%% QARMA ROUND FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\QarmaInit}[1]{%
  % #1 = initial state
  \node[state] (here) {\MatrixState{#1}};
  \coordinate[overlay] (prev) at (here.east);
}

\ifodd2
\newcommand{\QarmaRoundStacked}[8]{%
  % #1 = first operation name (S or \tau')
  % #2 = state after first operation (S)
  % #3 = tweakey state
  % #4 = state after tweakey addition
  % #5 = second operation name (\tau or S')
  % #6 = state after second operation (\tau)
  % #7 = third operation name (M or M')
  % #8 = state after third operation (M)

  % First operation
  \draw (here) ++(2,0) node[state] (here) {\MatrixState{#2}};
  \draw[next] (prev) -- node[above] {#1} (here);
  \coordinate (prev) at (here.east);

  % Tweakey addition
  \draw (here) ++(1,0) coordinate[xor] (xor);
  \draw [next] (prev) -- (xor);
  \draw (xor) ++(1,0) node[state] (tweakey) {\MatrixState{#3}};
  \draw [next] (tweakey) -- (xor);
  \draw (here) ++(-6,-2) node[state] (here) {\MatrixState{#4}};
  \draw[next, rounded corners=2pt] (xor) -- ++(0,-1) -| (here);
  \coordinate (prev) at (here.east);

  % Second operation
  \draw (here) ++(2,0) node[state] (here) {\MatrixState{#6}};
  \draw[next] (prev) -- node[above] {#5} (here);
  \draw (here.east) coordinate (prev);

  % Third operation
  \draw (here) ++(2,0) node[state] (here) {\MatrixState{#8}};
  \draw[next] (prev) -- node[above] {#7} (here);
  \draw (here.east) coordinate (prev);
}
\fi

%%% QARMAGEDDON ROUND FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\QarmaTInit}[3]{%
  % initialize Qarmageddon state stack for q=2
  % #1 = X[-1,0,*]
  % #2 = X[0,0,*]
  % #3 = X[1,0,*]
  \foreach \t/\tState/\name in {0/#1/$P$,
                                1/#2/$T^0$,
                                2/#3/$T^1$} {
    \coordinate (startT\t) at (0,\t*1.75);
    \draw (startT\t) ++(-2,0) node[anchor=west] (hereT\t) {\name};
    \draw (hereT\t.north) ++(0,.7) node {};
    % \draw (hereT\t.north west) ++(0,.25) coordinate (key0T\t) node[left, yshift=-3pt] {\kAname}
    %                            ++(0,.25) coordinate (key1T\t) node[left, yshift=3pt] {\kBname};
    \coordinate (prevT\t) at (hereT\t.east);
    \coordinate (hereT\t) at (hereT\t.west);
  }

  \draw (hereT0) ++(0, -.8) coordinate (keyheight);
}

\newcommand{\SingleTweakQarmaTInit}[2]{%
  % initialize Qarmageddon state stack for q=1
  % #1 = X[-1,0,*]
  % #2 = X[0,0,*]
  \foreach \t/\tState/\name in {0/#1/$P$,
                                1/#2/$T$} {
    \coordinate (startT\t) at (0,\t*1.75);
    \draw (startT\t) ++(-2,0) node[anchor=west] (hereT\t) {\name};
    \draw (hereT\t.north) ++(0,.7) node {};
    \coordinate (prevT\t) at (hereT\t.east);
    \coordinate (hereT\t) at (hereT\t.west);
  }

  \draw (hereT0) ++(0, -.8) coordinate (keyheight);
}


\newcommand{\QarmaTNewLine}[3]{%
  % initialize Qarmageddon state stack for q=2 in a new line
  % #1 = X[-1,0,*]
  % #2 = X[0,0,*]
  % #3 = X[1,0,*]

  \QarmaTNewLineLabelled{#1}{#2}{#3}{}{}
}

\newcommand{\QarmaTNewLineLabelled}[5]{%
  % initialize Qarmageddon state stack for q=2 in a new line
  % #1 = X[-1,0,*]
  % #2 = X[0,0,*]
  % #3 = X[1,0,*]
  % #4 = label for TK0 update
  % #5 = label for TK1 update

  \draw (hereT1-|hereT0) node (hereT1) {};
  \draw (hereT2-|hereT0) node (hereT2) {};

  \foreach \t/\tState/\label in {0/#1/,1/#2/#4,2/#3/#5} {
    \draw (hereT\t) ++(1.5, 0) node (tmp) {\dots};
    \draw (prevT\t) -- node[midway, above] {\label}  (tmp);

    \draw (startT\t) ++(0, -6) coordinate (startT\t);
    \node[state] (hereT\t) at (startT\t) {\MatrixState{\tState}};
    \coordinate (prevT\t) at (hereT\t.east);

    \draw (hereT\t) ++(-1.5, 0) node (tmp) {\dots};
    \draw[next] (tmp) -- (hereT\t);
  }

  \draw (keyheight) ++(0, -6) coordinate (keyheight);
}

\newcommand{\QarmaTKAddition}[4][]{
  % #1 = optional key label for key addition
  % #2 = tweakey index for xor destination
  % #3 = line label for xor source
  % #4 = state after xor

  % Tweakey addition
  \draw (hereT#2) ++(1.05,0) coordinate[xor] (xor);
  \draw [next] (prevT#2) -- (xor);
  \if\relax\detokenize{#3}\relax
    \path (xor) ++(0, .6) node (k) {\QarmaRoundKeyLabel};
    \draw [next,rounded corners=8pt] (k) -- (xor);
  \else
    \begin{pgfonlayer}{fg}
      \draw (#3-|xor) ++(0,0) coordinate[teebg];
      \draw (#3-|xor) ++(0,0) coordinate[tee] (tweakey);
    \end{pgfonlayer}
    \draw [prev,cross line, rounded corners=8pt] (xor) -- (tweakey);
  \fi

  \if\relax\detokenize{#1}\relax
  \else
    \draw (xor|-keyheight) node (key) {#1};
    \draw [next] (key) -- (xor);
  \fi

  \draw (hereT#2) ++(2,0) node[state] (hereT#2) {\MatrixState{#4}};
  \draw[next] (xor) -- (hereT#2);
  \coordinate (prevT#2) at (hereT#2.east);
}

\newcommand{\QarmaRoundKeyLabel}{$K$}
\newcommand{\QarmaTRound}[8][0]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = round index
  % #3 = line label for key addition
  % #4 = state after first operation (addtweakey)
  % #5 = second operation name (\tau or M',S')
  % #6 = state after second operation
  % #7 = third operation name (M,S)
  % #8 = state after third operation

  % Tweakey addition
  \QarmaTKAddition{#1}{#3}{#4}

  % Second operation
  \QarmaCustomRound{#1}{#6}{#5}{2}

  % Third operation
  \QarmaCustomRound{#1}{#8}{#7}{2}
}

\newcommand{\QarmaTdnuoR}[8][0]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = round index
  % IN DECRYPTION DIRECTION:
  % #3 = line label for key addition
  % #4 = state after first operation (addtweakey)
  % #5 = second operation name (\tau or M',S')
  % #6 = state after second operation
  % #7 = third operation name (M,S)
  % #8 = state after third operation

  % Third operation
  \QarmaCustomRound{#1}{#8}{#7}{2}

  % Second operation
  \QarmaCustomRound{#1}{#6}{#5}{2}

  % Tweakey addition
  \QarmaTKAddition{#1}{#3}{#4}
}

\newcommand{\QarmaTCentr}[7][0]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = round index
  % #3 = first operation name
  % #4 = state after first operation
  % #5 = state after second operation (addtweakey)
  % #6 = third operation name (M,S)
  % #7 = state after third operation

  % First operation
  \draw (hereT#1) ++(2,0) node[state] (hereT#1) {\MatrixState{#4}};
  \draw[next] (prevT#1) -- node[above] {#3} (hereT#1);
  \draw (hereT#1.east) coordinate (prevT#1);

  % Tweakey addition
  \ifcentralaccidentaladd
    \draw (hereT#1) ++(1.05,0) coordinate[xor] (xor);
    \draw [next] (prevT#1) -- (xor);
    \draw (hereT1-|xor) ++(-.25,0) coordinate[teebg];
    \draw (hereT1-|xor) ++(-.25,0) coordinate[tee] (tweakey0);
    \draw (hereT2-|xor) ++(+.25,0) coordinate[teebg];
    \draw (hereT2-|xor) ++(+.25,0) coordinate[tee] (tweakey1);
    \draw [next,rounded corners=6pt] (tweakey0) -- (hereT0.north-|tweakey0) -- (xor.north west);
    \draw [next,rounded corners=6pt] (tweakey1) -- (hereT0.north-|tweakey1) -- (xor.north east);
    \draw (hereT#1) ++(2,0) node[state] (hereT#1) {\MatrixState{#5}};
    \draw[next] (xor) -- (hereT#1);
  \else
    \draw (hereT#1) ++(2,0) node[state] (hereT#1) {\MatrixState{#5}};
    \draw [next] (prevT#1) -- (hereT#1);
  \fi
  \coordinate (prevT#1) at (hereT#1.east);

  % Third operation
  \draw (hereT#1) ++(2,0) node[state] (hereT#1) {\MatrixState{#7}};
  \draw[next] (prevT#1) -- node[above] {#6} (hereT#1);
  \draw (hereT#1.east) coordinate (prevT#1);
}

\newcommand{\QarmaEmptyTRound}[2][0]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = state after nop
  \draw (hereT#1) ++(6,0) node[state] (hereT#1) {\MatrixState{#2}};
  \draw[next] (prevT#1) -- (hereT#1);
  \draw (hereT#1.east) coordinate (prevT#1);
}

\newcommand{\QarmaShuffleTRound}[3]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = state after shuffle
  % #3 = label for shuffle
  \draw (hereT#1) ++(6,0) node[state] (hereT#1) {\MatrixState{#2}};
  \draw[next] (prevT#1) -- node[midway, above]{#3} (hereT#1);
  \draw (hereT#1.east) coordinate (prevT#1);
}

\newcommand{\QarmaCustomRound}[4]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = state after op
  % #3 = label for op
  % #4 = size
  \draw (hereT#1) ++(#4,0) node[state] (hereT#1) {\MatrixState{#2}};
  \draw[next] (prevT#1) -- node[midway, above]{#3} (hereT#1);
  \draw (hereT#1.east) coordinate (prevT#1);
}

\newcommand{\QarmaCenterMixing}[5]{%
  % #1 = tweakey index (-1=state, 0..1=tweakey)
  % #2 = state after op
  % #3 = label for op
  % #4 = key before
  % #5 = key after
  \draw (hereT#1)
    ++(1.25,0) coordinate[xor] (xor1)
    ++(1.5,0) coordinate[xor] (xor2)
    ++(1.25,0) node[state] (hereT#1) {\MatrixState{#2}};

  \draw (xor1) ++(0, -0.75) node (key1) {#4};
  \draw (xor2) ++(0, -0.75) node (key2) {#5};
  \draw [next] (key1) -- (xor1);
  \draw [next] (key2) -- (xor2);


  \draw[next] (prevT#1) -- (xor1);
  \draw[next] (xor1) -- node[midway, above]{#3} (xor2);
  \draw[next] (xor2) -- (hereT#1);

  \draw (hereT#1.east) coordinate (prevT#1);
}

% aliases for backward compatibility
\providecommand{\EmptyTRound}[2]{\QarmaEmptyTRound{#1}{#2}}
\providecommand{\ShuffleTRound}[3]{\QarmaShuffleTRound{#1}{#2}{#3}}
\providecommand{\CustomRound}[4]{\QarmaCustomRound{#1}{#2}{#3}{#4}}

\newcommand{\QarmaTFinal}{%
  \draw[next] (hereT0.east) -- ++(3mm, 0mm) node (hereT0) {};
  \foreach \t in {1,2} {
    \draw[next] (prevT\t.east) -- (hereT\t.east-|hereT0) node (hereT\t) {};
  }
}

\newcommand{\QarmaTFinalWithSbox}{%
  \draw (prevT0) -- ++(1, 0) node[fill=white] (hereT0) {$C$};
  \draw[next] (prevT0) -- node[midway, above] {$\BS$} (hereT0);

  \foreach \t in {1,2} {
    \draw[next] (prevT\t.east) -- (hereT\t.east-|hereT0.west) node (hereT\t) {};
  }
}

\newcommand{\SingleTweakQarmaTFinal}{%
  \draw[next] (hereT0.east) -- ++(3mm, 0mm) node (hereT0) {};
  \draw[next] (prevT1.east) -- (hereT1.east-|hereT0) node (hereT1) {};
}

\newcommand{\SingleTweakarmaTFinalWithSbox}{%
  \draw (prevT0) -- ++(1, 0) node[fill=white] (hereT0) {$C$};
  \draw[next] (prevT0) -- node[midway, above] {$\BS$} (hereT0);
  \draw[next] (prevT1.east) -- (hereT1.east-|hereT0.west) node (hereT1) {};
}


\endinput
